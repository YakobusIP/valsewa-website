generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Status {
  AVAILABLE
  IN_USE
  NOT_AVAILABLE
}

model Account {
  id                        Int       @id @default(autoincrement())
  username                  String
  nickname                  String
  accountCode               String    @unique
  description               String?
  accountRank               String
  availabilityStatus        Status    @default(AVAILABLE)
  currentBookingDate        DateTime?
  currentBookingDuration    Int?
  currentExpireAt           DateTime?
  nextBookingDate           DateTime?
  nextBookingDuration       Int?
  nextExpireAt              DateTime?
  totalRentHour             Int       @default(0)
  rentHourUpdated           Boolean   @default(false)
  password                  String
  passwordResetRequired     Boolean   @default(false)
  skinList                  String[]
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  priceTier   PriceTier @relation(fields: [priceTierId], references: [id])
  priceTierId Int

  thumbnail   ImageUpload? @relation("Thumbnail", fields: [thumbnailId], references: [id])
  thumbnailId Int?         @unique

  otherImages ImageUpload[] @relation("OtherImages")

  resetLogs AccountResetLog[]
}

model AccountResetLog {
  id               Int       @id @default(autoincrement())
  accountId        Int
  account          Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  previousExpireAt DateTime?
  resetAt          DateTime  @default(now())
}

model PriceTier {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  accounts Account[]
}

model ImageUpload {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thumbnailOf Account? @relation("Thumbnail")

  account   Account? @relation("OtherImages", fields: [accountId], references: [id])
  accountId Int?

  slide123Of    CarouselSlide?   @relation("Slide123")
  slide126Of    CarouselSlide?   @relation("Slide126")
  slide129Of  CarouselSlide?   @relation("Slide129")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarouselSlide {
  id        Int      @id @default(autoincrement())

  image123 ImageUpload @relation("Slide123", fields: [image123Id], references: [id])
  image123Id Int @unique

  image126 ImageUpload @relation("Slide126", fields: [image126Id], references: [id])
  image126Id Int@unique

  image129 ImageUpload @relation("Slide129", fields: [image129Id], references: [id])
  image129Id Int@unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}